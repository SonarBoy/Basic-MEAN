Create Project:

ng new (Project Name here).

What this does:
+ a new workspace with the (Project Name) as the root
+ initial skeleton app located in the src folder
+ End to End (e2e) test project
+ related config files

Serving up the application:
cd (Project Name)

ng serve --open

+ Starts the dev server and watches the source files
  and rebuilds the app as you make changes to those
  files.

+ The application Shell is the web page which is controlled
  by the AppComponent.


app.component.ts = the component class code
app.component.html = the component template
app.component.css = the components stylesheet

{{}} = Angulars interpolation binding syntax

================================================================================================================================
================================================================================================================================
================================================================================================================================
================================================================================================================================

To generate new compoenets for your application

ng generate component heros

initial import to make things work in the TS file:
import {Component, OnInit} from '@angular/core';

@Component is a decorator function that specifies the Angular
metadata for the component.

selector - the components CSS element selector
templateUrl - the location of the components template file
styleUrls - the location of the components private CSS styleUrls

ngOnInit() is a lifecycle hook here is where you put initialization
logic

+ To display the HerosComponent you must add it to the template of the Shell
AppComponent
+ remember app-heros is the element selector for the Heros Component
so in app.component.html
we add:

<h1>{{title}}<h1>
<app-heros></app-heros>

we then make the following changes

Create a class called
src/app/hero.ts

export class Hero {
  id: number;
  name: string;
}

we then modify our heroes.component.ts class to reflect the following

import { Component, OnInit } from '@angular/core';
import { Hero } from '../hero';

@Component({
  selector: 'app-heroes',
  templateUrl: './heroes.component.html',
  styleUrls: ['./heroes.component.css']
})
export class HeroesComponent implements OnInit {
  hero: Hero = {
    id: 1,
    name: 'Windstorm'
  };

  constructor() { }

  ngOnInit() {
  }

}

this allows us to display data from our typescript file into the
heros html template file.

Now lets say if we wanted to edit the heros name right in the web page how would we do this?
We would first edit the heros.component.html to look something like this:

<h2>{{hero.name}} Details</h2>
<div><span>id: </span>{{hero.id}}</div>
<div><span>name: </span>{{hero.name}}</div>
<div>
  <label>name:
    <input [(ngModel)]="hero.name" placeholder="name"/>
  </label>
</div>

But note once you run this it would break the application. Why? because we have not imported the forms
module into our main app.module.ts lets do that and see what it looks like.

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';

//Forms module for inputting data
import {FormsModule} from '@angular/forms';


import { AppComponent } from './app.component';
import { HerosComponent } from './heros/heros.component';

@NgModule({
  declarations: [
    AppComponent,
    HerosComponent
  ],
  imports: [
    BrowserModule,
    //Importing of forms module here
    FormsModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

Note the Commented lines with the // the lines below the comments are the imports to get this two way data binding working.
[(ngModel)] is Angular's two-way data binding syntax.

Here it binds the hero.name property to the HTML textbox so that data can flow in both directions:
from the hero.name property to the textbox, and from the textbox back to the hero.name.


================================================================================================================================
================================================================================================================================
================================================================================================================================
================================================================================================================================

In this section we will learn how to create a list and edit it.

create a new file in your app folder called mock-heros.ts and populate it with the following:

import {Hero} from './hero';

export const HEROES: Hero[] =[
  { id: 11, name: 'Dr Nice' },
  { id: 12, name: 'Narco' },
  { id: 13, name: 'Bombasto' },
  { id: 14, name: 'Celeritas' },
  { id: 15, name: 'Magneta' },
  { id: 16, name: 'RubberMan' },
  { id: 17, name: 'Dynama' },
  { id: 18, name: 'Dr IQ' },
  { id: 19, name: 'Magma' },
  { id: 20, name: 'Tornado' }
];

We will then change the heros.component.ts to import the list of heros that we just created by the following:

import { Component, OnInit } from '@angular/core';

//Importing the mock heros file NOTE THE NAME USED FOR THE EXPORT MUST BE THE SAME AS THE IMPORT
import { HEROES } from '../mock-heroes';

@Component({
  selector: 'app-heros',
  templateUrl: './heros.component.html',
  styleUrls: ['./heros.component.css']
})
export class HerosComponent implements OnInit {
  //ASSINGMENT OF THE heroes to the exported HEROES file.
  heroes = HEROES;

  constructor() { }

  ngOnInit() {
  }

}

Then in the heros.component.html paste this.

<h2>My Heroes</h2>
<ul class="heroes">
  <li *ngFor="let hero of heroes">
    <span class="badge">{{hero.id}}</span> {{hero.name}}
  </li>
</ul>


NOTE!! THE HEROES COLLECTION THAT YOU CREATED IN THE COMP.TS CLASS is CALLED IN THE HTML CLASS BY THE COLLECTION NAME "heroes"



The *ngFor is Angular's repeater directive. It repeats the host element for each element in a list.

The syntax in this example is as follows:

<li> is the host element.
heroes holds the mock heroes list from the HeroesComponent class, the mock heroes list.
hero holds the current hero object for each iteration through the list.


ADDING A CLICK EVENT!!

First we need to bind the click event to the DOM element like so:
<li *ngFor="let hero of heroes" (click)="onSelect(hero)">

The parentheses around click tell Angular to listen for the <li> element's click event. When the user clicks in the <li>,
Angular executes the onSelect(hero) expression.

We then go do he Heros.component.ts file and change the hero property to selectedHero:
we add the on select method which assigns the clicked hero from the template to the component.
selectedHero: Hero;
onSelect(hero: Hero): void {
  this.selectedHero = hero;
}

we then update the heros.component.HTML  to reflect our click event.
<h2>{{selectedHero.name | uppercase}} Details</h2>
<div><span>id: </span>{{selectedHero.id}}</div>
<div>
  <label>name:
    <input [(ngModel)]="selectedHero.name" placeholder="name"/>
  </label>
</div>

but we ge and error this is because the selected hero is undefined there is no way for the DOM
to know what hero we selected so this breaks everything.

we must wrap all the above html with a div that contains the *ngIf directive and set it to selected hero.

//SEE HOW THIS IS THEN USED TO IDENTIFY THE SELECTED HERO AND ALLOWS US TO USE IT.
<div *ngIf="selectedHero">

  <h2>{{selectedHero.name | uppercase}} Details</h2>
  <div><span>id: </span>{{selectedHero.id}}</div>
  <div>
    <label>name:
      <input [(ngModel)]="selectedHero.name" placeholder="name"/>
    </label>
  </div>

</div>

we can also change some of the styles around when the click happens by ADDING
[class.selected]="hero === selectedHero" to the attributes of the list item.


<li *ngFor="let hero of heroes"
  [class.selected]="hero === selectedHero"
  (click)="onSelect(hero)">

================================================================================================================================
================================================================================================================================
================================================================================================================================
================================================================================================================================

We will now make a new child component to show the details of the heros.

we start by executing the following command:
ng generate component hero-detail

in the html of this hero detail component we will write the following:
<div *ngIf="hero">

  <h2>{{hero.name | uppercase}} Details</h2>
  <div><span>id: </span>{{hero.id}}</div>
  <div>
    <label>name:
      <input [(ngModel)]="hero.name" placeholder="name"/>
    </label>
  </div>

</div>

In the hero-detail.ts file we will first import the hero class and then we will also inport an Input class from angular core and then
we will go on a bit of a bend

import { Component, OnInit, Input } from '@angular/core';
import { Hero } from '../hero';

we then add the following line to the hero.component.html template
<app-hero-detail [hero]="selectedHero"></app-hero-detail>

we will also add the following line to the exported part of the hero-details component to allow data to be shared from its parent componenet
which is the hero.componenet

export class HeroDetailComponent implements OnInit {
  @Input() hero: Hero;
  constructor() { }

  ngOnInit() {
  }

}




DOCUMENTATION:
@Input() and @Output() allow Angular to share data between the parent context and child directives or components. An @Input()
property is writable while an @Output() property is observable.

Consider this example of a child/parent relationship:

content_copy
<parent-component>
  <child-component></child-component>
</parent-component>
Here, the <child-component> selector, or child directive, is embedded within a <parent-component>, which serves as the child's context.

@Input() and @Output() act as the API, or application programming interface, of the child component in that they allow the
child to communicate with the parent. Think of @Input() and @Output() like ports or doorways—@Input() is the doorway into
the component allowing data to flow in while @Output() is the doorway out of the component, allowing the child component to
send data out.


https://angular.io/guide/template-syntax#inputs-outputs
